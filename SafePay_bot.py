from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, MenuButtonCommands
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import configparser
import os
import logging
import Config
import warnings
import logging

import os
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    # handlers=[
    #     # logging.FileHandler("bot.log"),
    #     logging.StreamHandler()
    # ]
)
# –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è.
logger = logging.getLogger(__name__)

# –ü–æ–¥–∞–≤–ª—è–µ–º INFO-–ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
logging.getLogger("httpx").setLevel(logging.WARNING)


warnings.filterwarnings("ignore", category=UserWarning)


def clear_console():
    # –î–ª—è Windows
    if os.name == 'nt':
        _ = os.system('cls')
    # –î–ª—è macOS –∏ Linux
    else:
        _ = os.system('clear')


class SafePayBot:
    def __init__(self):

        self.user_sessions = {}
        (
            self.CHOOSING_CURRENCY,
            self.ENTERING_AMOUNT,
            self.ENTERING_BANK_NAME,
            self.ENTERING_CARD_DETAILS,
            self.ENTERING_FIO_DETAILS,
            self.ENTERING_INN_DETAILS,
            self.CONFIRMING_EXCHANGE,
            self.CONFIRMING_EXCHANGE_TRX,
            self.ENTERING_TRX_ADDRESS,
            self.FINAL_CONFIRMING_EXCHANGE_TRX
        ) = range(10)

        self.config = Config.Config()

        self.token = self.config.get_token()
        self.admin_chat_id = self.config.get_admin_chat_id()
        self.exchange_rate = float(self.config.get_exchange_rate())
        self.admin_password = self.config.get_admin_password()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        self.application = ApplicationBuilder().token(self.token).post_init(self.post_init).build()

        self.SafePay_bot = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.handel_user_menu, pattern='^user_')],
            states={
                self.CHOOSING_CURRENCY: [CallbackQueryHandler(self.choosing_currency, pattern='^user_')],
                self.ENTERING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_amount)],
                self.ENTERING_BANK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_bank_name)],
                # self.ENTERING_CARD_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_card_details)],
                # self.ENTERING_FIO_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_fio_details)],
                # self.ENTERING_INN_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_inn_details)],
                # self.CONFIRMING_EXCHANGE: [CallbackQueryHandler(self.confirming_exchange)],
                # self.CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(self.confirming_exchange_trx)],
                # self.ENTERING_TRX_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_trx_address)],
                # self.FINAL_CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(self.final_confirming_exchange_trx)],
            },
            fallbacks=[CommandHandler('start', self.start)],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(self.SafePay_bot)
        self.application.add_handler(CommandHandler("start", self.start))

    async def post_init(self, application):
        """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        await application.bot.set_my_commands([
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("a", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        ])
        logger.info("Bot commands have been set.")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) started the bot.")
        context.bot_data['ADMIN_CHAT_ID'] = int(self.config.get_admin_chat_id())

        keyboard = [
            [
                InlineKeyboardButton("‚û∏ –û–±–º–µ–Ω—è—Ç—å", callback_data='user_exchange'),
                InlineKeyboardButton("üìâ –ö—É—Ä—Å", callback_data='user_rate'),
                InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data='user_help'),
            ],
        ]
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafePay Bot üí±\n\n"
            "üß≤ –û–±–º–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π.\n\n"
            "üåü –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
        )

        if update.message:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handel_user_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.query = update.callback_query
        await self.query.answer()
        self.data = self.query.data
        self.user = self.query.from_user
        logger.info(
            f"User {self.user.id} ({self.user.username}) selected menu option: {self.data}")

        if self.data == 'user_rate':
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='user_menu_back_to_menu')]
            ]
            await self.query.edit_message_text(
                f"üìâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {float(self.config.get_exchange_rate())} UAH",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif self.data == 'user_exchange':
            keyboard = [
                [InlineKeyboardButton("USDT", callback_data='user_currency_usdt')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='user_menu_back_to_menu')]
            ]
            await self.query.edit_message_text(
                "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return self.CHOOSING_CURRENCY

        elif self.data == 'user_help':
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='user_menu_back_to_menu')]
            ]
            await self.query.edit_message_text(
                f"üîß –ü–æ–º–æ—â—å: –ù–∞–ø–∏—à–∏ {self.config.get_support_contact()} –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif self.data == 'user_menu_back_to_menu':
            await self.start(update, context)
            return ConversationHandler.END

        return ConversationHandler.END

    async def choosing_currency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logging.info(
            f"User {update.effective_user.id} ({update.effective_user.username}) is choosing currency.")
        self.query = update.callback_query
        await self.query.answer()
        self.data = self.query.data
        self.user = self.query.from_user

        if self.data == 'user_currency_usdt':
            context.user_data['currency'] = 'USDT'
            logger.info(
                f"User {self.user.id} ({self.user.username}) chose currency: {context.user_data['currency']}")
            await self.query.message.chat.send_message(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–≤ {context.user_data['currency']}):")
            return self.ENTERING_AMOUNT

        elif self.data == 'user_menu_back_to_menu':
            logger.info(
                f"User {self.user.id} ({self.user.username}) returned to the main menu from currency selection.")
            await self.start(update, context)
            return ConversationHandler.END

        return ConversationHandler.END

    async def entering_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.text = update.message.text
        self.user = update.effective_user
        try:
            self.amount = float(self.text.replace(',', '.'))
            if self.amount <= 0:
                logger.warning(
                    f"User {self.user.id} ({self.user.username}) entered a non-positive amount: {self.amount}")
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                return self.ENTERING_AMOUNT
        except ValueError:
            logger.warning(
                f"User {self.user.id} ({self.user.username}) entered an invalid amount: '{self.text}'")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return self.ENTERING_AMOUNT

        context.user_data['amount'] = self.amount
        self.currency = context.user_data.get('currency', 'USDT')
        self.sum_uah = self.amount * float(self.config.get_exchange_rate())
        context.user_data['sum_uah'] = self.sum_uah
        logger.info(
            f"User {self.user.id} ({self.user.username}) entered amount: {self.amount} {self.currency}. Calculated sum: {self.sum_uah:.2f} UAH.")

        await update.message.reply_text(
            f"‚úÖ –•–æ—Ä–æ—à–æ! –ö –æ–ø–ª–∞—Ç–µ: {self.sum_uah:.2f} UAH.\n\nüè¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–±–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫', '–ú–æ–Ω–æ–±–∞–Ω–∫' –∏ —Ç.–¥.).\n"
        )
        return self.ENTERING_BANK_NAME

    async def entering_bank_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.bank_name = update.message.text.strip()
        self.user = update.effective_user
        if not self.bank_name:
            logger.warning(
                f"User {self.user.id} ({self.user.username}) entered an empty bank name.")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
            return self.ENTERING_BANK_NAME

        context.user_data['bank_name'] = self.bank_name
        logger.info(
            f"User {self.user.id} ({self.user.username}) entered bank name: {self.bank_name}")

        await update.message.reply_text(
            f"üè¶ –í—ã —É–∫–∞–∑–∞–ª–∏ –±–∞–Ω–∫: {self.bank_name}\n\n"
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ IBAN):"
        )

        return self.ENTERING_CARD_DETAILS

    async def entering_card_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.card_info = update.message.text.strip()
        self.user = update.effective_user
        if not self.card_info:
            logger.warning(
                f"User {self.user.id} ({self.user.username}) entered empty card details.")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
            return self.ENTERING_CARD_DETAILS

        context.user_data['card_info'] = self.card_info
        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        logger.info(f"User {self.user.id} ({self.user.username}) entered card details.")

        await update.message.reply_text(
            f"üí≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {self.card_info}\n\n"
            f"üë§ –£–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:"
        )

        return self.ENTERING_FIO_DETAILS

    async def entering_fio_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.fio = update.message.text.strip()
        self.user = update.effective_user
        if not self.fio:
            logger.warning(f"User {self.user.id} ({self.user.username}) entered empty FIO.")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û.")
            return self.ENTERING_FIO_DETAILS

        context.user_data['fio'] = self.fio
        logger.info(f"User {self.user.id} ({self.user.username}) entered FIO.")  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –§–ò–û

        await update.message.reply_text(
            f"üë§ –í—ã —É–∫–∞–∑–∞–ª–∏ –§–ò–û: {self.fio}\n\n"
            "üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù (–Ü–ü–ù/–ï–î–†–ü–û–£):"
        )

        return self.ENTERING_INN_DETAILS

    async def entering_inn_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.inn = update.message.text.strip()
        self.user = update.effective_user
        if not self.inn:
            logger.warning(f"User {self.user.id} ({self.user.username}) entered empty INN.")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù.")
            return self.ENTERING_INN_DETAILS

        context.user_data['inn'] = self.inn
        logger.info(f"User {self.user.id} ({self.user.username}) entered INN.")  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ò–ù–ù

        await update.message.reply_text(
            f"–í—ã —É–∫–∞–∑–∞–ª–∏ –ò–ù–ù: {self.inn}\n\n"
        )

        self.amount = context.user_data['amount']
        self.currency = context.user_data['currency']
        self.sum_uah = context.user_data['sum_uah']
        self.fio = context.user_data['fio']
        self.bank_name = context.user_data['bank_name']
        self.keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='user_send_exchange')],
            [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='user_send_exchange_trx')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='user_menu_back_to_menu')]
        ]

        await update.message.reply_text(
            f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {self.amount} {self.currency} –Ω–∞ {self.sum_uah:.2f} UAH.\n\n"
            f"üè¶ –ë–∞–Ω–∫: {self.bank_name}\n"
            f"üë§ –§–ò–û: {self.fio}\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: {context.user_data['card_info']}\n"
            f"üÜî –ò–ù–ù: {self.inn}\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "‚ö° –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω TRX, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
            reply_markup=InlineKeyboardMarkup(self.keyboard),
            parse_mode='Markdown'
        )

        return self.CONFIRMING_EXCHANGE

    async def confirming_exchange(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.query = update.callback_query
        await self.query.answer()
        self.data = self.query.data
        self.user = update.effective_user
        logger.info(
            f"User {self.user.id} ({self.user.username}) is at final confirmation step. Action: {self.data}")

        self.amount = context.user_data.get('amount')
        self.currency = context.user_data.get('currency', 'USDT')
        self.sum_uah = context.user_data.get('sum_uah', 0)
        self.fio = context.user_data.get('fio', '')
        self.bank_name = context.user_data.get('bank_name', '')
        self.inn = context.user_data.get('inn', '')
        self.card_info = context.user_data.get('card_info', '')

        self.user_sessions[self.user.id] = context.user_data.copy()

        user_info = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üÜî ID: `{self.user.id}`\n"
            f"üìõ –ò–º—è: `{self.user.first_name or '-'}`\n"
            f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{self.user.username if self.user.username else '–Ω–µ—Ç'}\n\n"
        )

        transfer_info = (
            f"üè¶ –ë–∞–Ω–∫: `{self.bank_name}`\n"
            f"üìù –§–ò–û: `{self.fio}`\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{self.card_info}`\n"
            f"üìá –ò–ù–ù: `{self.inn}`\n\n"
        )

        if self.data == 'user_send_exchange':
            logger.info(
                f"Creating standard exchange request for user {self.user.id}. Amount: {self.amount} {self.currency}")
            await self.query.message.chat.send_message(
                f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
                f"üíµ –°—É–º–º–∞: {self.amount} {self.currency} ‚Üí {self.sum_uah:.2f} UAH\n\n"
                f"üè¶ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n"
                f"`{self.config.get_wallet_address()}`\n\n",
                parse_mode='Markdown'
            )

            admin_chat_id = self.config.get_admin_chat_id
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω",
                                     callback_data=f"confirm_payment_{self.user.id}")
            ]])

            admin_msg = await context.bot.send_message(
                chat_id=admin_chat_id,
                text=(
                    f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
                    f"üí± {self.amount} {self.currency} ‚Üí {self.sum_uah:.2f} UAH\n\n"
                    f"{user_info}"
                    f"{transfer_info}"
                ),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            self.user_sessions[self.user.id]['admin_message_id'] = admin_msg.message_id
            self.user_sessions[self.user.id]['admin_chat_id'] = admin_msg.chat_id
            logger.info(f"Exchange request for user {self.user.id} sent to admin {admin_chat_id}.")
            return ConversationHandler.END

        elif self.data == 'send_exchange_trx':
            logger.info(f"User {self.user.id} chose to receive TRX for commission.")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='user_send_transfer_trx')],
                [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='user_menu_back_to_menu')]
            ])

            await self.query.edit_message_text(
                "‚ö° –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–Ω—è—Ç—ã –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.\n\n"
                "üí° –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
                reply_markup=keyboard, parse_mode='Markdown'
            )
            return ConversationHandler.END


if __name__ == "__main__":
    clear_console()
    bot = SafePayBot()
    logger.info("Starting SafePay Bot...")
    logger.info("Bot Token: %s", bot.token)
    bot.application.run_polling()
