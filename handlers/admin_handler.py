# handlers/admin_handler.py

import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
)

logger = logging.getLogger(__name__)


class AdminPanelHandler:
    """
    Handles all logic related to the admin panel.
    """
    # Conversation states are defined as class attributes for clarity
    (
        ASK_PASSWORD,
        ADMIN_MENU,
        SETTINGS_MENU,
        SET_NEW_PASSWORD,
        SET_EXCHANGE_RATE,
        SET_WALLET,
        SET_SUPPORT,
        AWAIT_USER_FOR_APPS,  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ) = range(8)

    def __init__(self, bot_instance):
        """
        The constructor receives the main Bot instance
        to access shared resources like configuration.
        """
        self.bot = bot_instance

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) is trying to access the admin panel.")

        if not self.bot.config.admin_ids:
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return ConversationHandler.END

        if user.id not in self.bot.config.admin_ids:
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return ConversationHandler.END

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        return self.ASK_PASSWORD

    async def check_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        entered_password = update.message.text.strip()
        user = update.effective_user

        if entered_password == self.bot.config.admin_password:
            logger.info(f"Admin {user.id} ({user.username}) entered the correct password.")
            return await self._show_main_menu(update)
        else:
            logger.warning(f"Admin {user.id} ({user.username}) entered the wrong password.")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return self.ASK_PASSWORD

    async def _show_main_menu(self, update: Update):
        logger.info(f"Displaying admin main menu for {update.effective_user.id}.")
        keyboard = [
            [
                InlineKeyboardButton("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='admin_info'),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings'),
            ],
            [
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏", callback_data='find_user_applications'),
            ],
        ]
        text = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

        return self.ADMIN_MENU

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user = query.from_user
        logger.info(f"Admin {user.id} ({user.username}) selected option: {data}")

        if user.id not in self.bot.config.admin_ids:
            await query.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END

        if data == 'admin_info':
            return await self._show_info(query)
        elif data == 'admin_settings':
            return await self._show_settings_menu(query)
        elif data == 'admin_back_menu':
            return await self._show_main_menu(update)
        elif data == 'admin_set_password':
            await query.edit_message_text("üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
            return self.SET_NEW_PASSWORD
        elif data == 'admin_set_exchange_rate':
            await query.edit_message_text(f"üí± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (—Ç–µ–∫—É—â–∏–π: {self.bot.config.exchange_rate}):")
            return self.SET_EXCHANGE_RATE
        elif data == 'admin_set_wallet':
            await query.edit_message_text("üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
            return self.SET_WALLET
        elif data == 'admin_set_support':
            await query.edit_message_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
            return self.SET_SUPPORT
        elif data == 'find_user_applications':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ login —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:")
            return self.AWAIT_USER_FOR_APPS

        return self.ADMIN_MENU

    async def _show_info(self, query):
        masked_password = '*' * len(self.bot.config.admin_password)
        admin_ids_str = ', '.join(map(str, self.bot.config.admin_ids))
        text = (
            "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
            f"üë§ <b>Admin IDs:</b> <code>{admin_ids_str}</code>\n"
            f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{masked_password}</code>\n"
            f"üí± <b>–ö—É—Ä—Å:</b> <code>{self.bot.config.exchange_rate}</code>\n"
            f"üíº <b>–ö–æ—à–µ–ª—ë–∫:</b> <code>{self.bot.config.wallet_address}</code>\n"
            f"üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> <code>{self.bot.config.support_contact}</code>"
        )
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')]])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')
        return self.ADMIN_MENU

    async def _show_settings_menu(self, query):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª—å", callback_data='admin_set_password')],
            [InlineKeyboardButton("üí± –ö—É—Ä—Å", callback_data='admin_set_exchange_rate')],
            [InlineKeyboardButton("üíº –ö–æ—à–µ–ª—ë–∫", callback_data='admin_set_wallet')],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='admin_set_support')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')],
        ])
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
        return self.SETTINGS_MENU

    async def show_user_applications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_input = update.message.text.strip().lower()
        admin_user = update.effective_user
        logger.info(f"Admin {admin_user.id} is searching for applications of user: {user_input}")

        # --- –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–∏–º–µ—Ä: applications = await db.get_active_applications_by_user(user_input)
        mock_data_string = "1,349988626,radley74,awaiting_confirmation,USDT,123.0,3813.0,123,123,123,123,,0,123,{},2025-08-07 10:12:24,2025-08-07 10:12:45"

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫
        all_applications_mock = [self._parse_application_data(mock_data_string)]

        found_apps = [
            app for app in all_applications_mock
            if user_input == str(app['user_id']) or user_input == app['username'].lower()
        ]
        # --- –ö–æ–Ω–µ—Ü —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---

        if found_apps:
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({len(found_apps)} —à—Ç.):")
            for app in found_apps:
                response_text = self._format_application_info(app)
                await update.message.reply_text(response_text, parse_mode='HTML')
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        return await self._show_main_menu(update)

    def _parse_application_data(self, data_string: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
        parts = data_string.split(',')
        return {
            'id': parts[0],
            'user_id': int(parts[1]),
            'username': parts[2],
            'status': parts[3],
            'currency': parts[4],
            'amount_currency': float(parts[5]),
            'amount_uah': float(parts[6]),
            'bank_name': parts[7],
            'card_info': parts[8],
            'fio': parts[9],
            'inn': parts[10],
            'trx_address': parts[11],
            'needs_trx': parts[12],
            'transaction_hash': parts[13],
            'admin_message_ids': parts[14],
            'created_at': parts[15],
            'updated_at': parts[16]
        }

    def _format_application_info(self, app: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        return (
            f"<b>–ó–∞—è–≤–∫–∞ ID:</b> <code>{app['id']}</code>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{app['username']} (<code>{app['user_id']}</code>)\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {app['status']}\n"
            f"<b>–í–∞–ª—é—Ç–∞:</b> {app['currency']}\n"
            f"<b>–°—É–º–º–∞ (–≤–∞–ª—é—Ç–∞):</b> {app['amount_currency']}\n"
            f"<b>–°—É–º–º–∞ (UAH):</b> {app['amount_uah']}\n"
            f"<b>–ë–∞–Ω–∫:</b> {app['bank_name']}\n"
            f"<b>–ö–∞—Ä—Ç–∞:</b> <code>{app['card_info']}</code>\n"
            f"<b>–§–ò–û:</b> {app['fio']}\n"
            f"<b>–ò–ù–ù:</b> <code>{app['inn']}</code>\n"
            f"<b>TRX –∞–¥—Ä–µ—Å:</b> <code>{app['trx_address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
            f"<b>–ù—É–∂–µ–Ω TRX?:</b> {'–î–∞' if app['needs_trx'] == '1' else '–ù–µ—Ç'}\n"
            f"<b>–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{app['transaction_hash'] or '–ù–µ—Ç'}</code>\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {app['created_at']}\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {app['updated_at']}"
        )

    async def set_new_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.bot.config.admin_password = update.message.text.strip()
        await self.bot.config.save()
        logger.info(f"Admin {update.effective_user.id} updated the password.")
        await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return await self._show_main_menu(update)

    async def set_exchange_rate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            new_rate = float(update.message.text.strip().replace(',', '.'))
            self.bot.config.exchange_rate = new_rate
            await self.bot.config.save()
            logger.info(
                f"Admin {update.effective_user.id} updated the exchange rate to: {new_rate}")
            await update.message.reply_text("‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return await self._show_main_menu(update)

    async def set_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.bot.config.wallet_address = update.message.text.strip()
        await self.bot.config.save()
        logger.info(f"Admin {update.effective_user.id} updated the wallet address.")
        await update.message.reply_text("‚úÖ –ö–æ—à–µ–ª—ë–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return await self._show_main_menu(update)

    async def set_support_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        new_support = update.message.text.strip()
        if not re.fullmatch(r"[A-Za-z0-9@._\- ]+", new_support):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, @ . _ -")
            return self.SET_SUPPORT
        else:
            self.bot.config.support_contact = new_support
            await self.bot.config.save()
            logger.info(f"Admin {update.effective_user.id} updated the support contact.")
            await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return await self._show_main_menu(update)

    async def close(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id in self.bot.config.admin_ids:
            logger.info(f"Admin {user.id} closed the admin panel.")
            await update.message.reply_text("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
        return ConversationHandler.END

    def setup_handlers(self, application):
        """Creates and registers the handlers for the admin panel."""
        admin_conversation_handler = ConversationHandler(
            entry_points=[CommandHandler('a', self.start)],
            states={
                self.ASK_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_password)],
                self.ADMIN_MENU: [CallbackQueryHandler(self.handle_callback, pattern='^admin_|find_user_applications')],
                self.SETTINGS_MENU: [CallbackQueryHandler(self.handle_callback, pattern='^admin_')],
                self.SET_NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_new_password)],
                self.SET_EXCHANGE_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_exchange_rate)],
                self.SET_WALLET: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_wallet)],
                self.SET_SUPPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_support_contact)],
                self.AWAIT_USER_FOR_APPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.show_user_applications)],
            },
            fallbacks=[CommandHandler('a', self.start), CommandHandler('ac', self.close)]
        )
        application.add_handler(admin_conversation_handler)
