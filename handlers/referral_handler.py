# handlers/referral_handler.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler
)

logger = logging.getLogger(__name__)


class ReferralHandler:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–π –ª–æ–≥–∏–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
    """
    (
        REFERRAL_MENU,
    ) = range(30, 31)

    REFERRAL_BONUS = 15.0

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def start_referral(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –Ø–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        """
        user = update.effective_user
        logger.info(f"[Uid] ({user.id}, {user.username}) - Entered referral menu.")

        profile = self.bot.db.get_user_profile(user.id)
        referral_balance = profile.get('referral_balance', 0.0) if profile else 0.0
        referrals = self.bot.db.get_referrals_by_referrer_id(user.id)

        bot_username = (await context.bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref_{user.id}"

        text = (
            f"üèÜ **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ **${self.REFERRAL_BONUS}** –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ —Å–æ–≤–µ—Ä—à–∏—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n\n"
            f"üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n`{referral_link}`\n\n"
            f"üí∞ **–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:** ${referral_balance:.2f}\n\n"
        )

        if referrals:
            text += "üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            for ref in referrals:
                status = "‚úÖ (–±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω)" if ref['is_credited'] else "‚è≥ (–æ–∂–∏–¥–∞–µ—Ç –æ–±–º–µ–Ω–∞)"
                text += f"- @{ref['referred_username'] or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} {status}\n"
        else:
            text += "–í—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"

        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  callback_data='back_to_main_menu')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

        return self.REFERRAL_MENU

    async def handle_referral_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        referrer_id_str = context.args[0].split('_')[1]

        if not referrer_id_str.isdigit():
            return await self.bot.exchange_handler.start_command(update, context, called_from_referral=True)

        referrer_id = int(referrer_id_str)

        if user.id == referrer_id:
            await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return await self.bot.exchange_handler.start_command(update, context, called_from_referral=True)

        if not self.bot.db.get_referral_by_referred_id(user.id):
            self.bot.db.create_referral(referrer_id, user.id, user.username)
            logger.info(
                f"[Uid] ({user.id}, {user.username}) registered as a referral of {referrer_id}.")
            try:
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{user.username or user.id}! –í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏."
                )
            except Exception as e:
                logger.error(f"Failed to send notification to referrer {referrer_id}: {e}")

        await self.bot.exchange_handler.start_command(update, context, called_from_referral=True)

    async def credit_referrer(self, referred_user_id: int):
        referral = self.bot.db.get_referral_by_referred_id(referred_user_id)
        if not referral or referral['is_credited']:
            return

        if self.bot.db.get_user_completed_request_count(referred_user_id) != 1:
            return

        referrer_id = referral['referrer_id']
        self.bot.db.update_referral_balance(referrer_id, self.REFERRAL_BONUS)
        self.bot.db.update_referral_as_credited(referred_user_id)
        logger.info(
            f"Credited ${self.REFERRAL_BONUS} to {referrer_id} for referral {referred_user_id}.")

        try:
            await self.bot.application.bot.send_message(
                chat_id=referrer_id,
                text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **${self.REFERRAL_BONUS}**.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Failed to send bonus notification to referrer {referrer_id}: {e}")

    async def back_to_main_menu_from_referral(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        query = update.callback_query
        await query.answer()

        await self.bot.exchange_handler.main_menu(update, context)
        return ConversationHandler.END

    def setup_handlers(self, application):
        referral_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('referral', self.start_referral),
                CallbackQueryHandler(self.start_referral, pattern='^referral_program$')
            ],
            states={
                self.REFERRAL_MENU: [
                    CallbackQueryHandler(self.back_to_main_menu_from_referral,
                                         pattern='^back_to_main_menu$')
                ]
            },
            fallbacks=[
                # --- START OF FIX ---
                CommandHandler('start', self.bot.exchange_handler.cancel_and_return_to_menu)
                # --- END OF FIX ---
            ],
            per_message=False,
            block=False  # Allow other handlers to process updates
        )
        application.add_handler(referral_conv_handler)
