# handlers/exchange_handler.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
)

logger = logging.getLogger(__name__)


class ExchangeHandler:
    """
    Handles all logic related to the currency exchange process:
    - User dialog (ConversationHandler)
    - Notifications to administrators
    - Handling administrator actions (confirmation, denial)
    """
    # Conversation states are defined as class attributes for clarity
    (
        CHOOSING_CURRENCY, ENTERING_AMOUNT, ENTERING_BANK_NAME, ENTERING_CARD_DETAILS,
        ENTERING_FIO_DETAILS, ENTERING_INN_DETAILS, CONFIRMING_EXCHANGE,
        CONFIRMING_EXCHANGE_TRX, ENTERING_TRX_ADDRESS, FINAL_CONFIRMING_EXCHANGE_TRX,
        ENTERING_HASH,
    ) = range(11)

    def __init__(self, bot_instance):
        """
        The constructor receives the main Bot instance to access
        shared resources like configuration and sessions.
        """
        self.bot = bot_instance

    # --- Main Menu and its handling ---

    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Sends or edits a message to show the main menu."""
        keyboard = [
            [
                InlineKeyboardButton("‚û∏ –û–±–º–µ–Ω—è—Ç—å", callback_data='exchange'),
                InlineKeyboardButton("üìâ –ö—É—Ä—Å", callback_data='rate'),
                InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data='user_help'),
            ],
        ]
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafePay Bot üí±\n\n"
            "üß≤ –û–±–º–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π.\n\n"
            "üåü –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
        )

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        elif update.message:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles the /start command when there is no active conversation."""
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) started the bot.")
        await self.main_menu(update, context)

    async def cancel_and_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Ends the current conversation and shows the main menu."""
        user = update.effective_user
        logger.info(
            f"User {user.id} ({user.username}) used /start to cancel or restart the conversation.")
        await self.main_menu(update, context)
        return ConversationHandler.END

    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles main menu button presses, starting a conversation."""
        query = update.callback_query
        await query.answer()
        data = query.data
        user = query.from_user
        logger.info(f"User {user.id} ({user.username}) selected menu option: {data}")

        if data == 'rate':
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            await query.edit_message_text(f"üìâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {self.bot.config.exchange_rate} UAH", reply_markup=InlineKeyboardMarkup(keyboard))
            return ConversationHandler.END

        elif data == 'exchange':
            keyboard = [
                [InlineKeyboardButton("USDT", callback_data='currency_usdt')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ]
            await query.edit_message_text("üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
            return self.CHOOSING_CURRENCY

        elif data == 'user_help':
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            await query.edit_message_text(
                f"üîß –ü–æ–º–æ—â—å: –ù–∞–ø–∏—à–∏ {self.bot.config.support_contact} –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ConversationHandler.END

        elif data == 'back_to_menu':
            await self.main_menu(update, context)
            return ConversationHandler.END

        return ConversationHandler.END

    # --- ConversationHandler methods for the exchange process ---

    async def choosing_currency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user = query.from_user

        if data == 'currency_usdt':
            context.user_data['currency'] = 'USDT'
            logger.info(
                f"User {user.id} ({user.username}) chose currency: {context.user_data['currency']}")
            await query.edit_message_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–≤ {context.user_data['currency']}):")
            return self.ENTERING_AMOUNT
        elif data == 'back_to_menu':
            logger.info(f"User {user.id} ({user.username}) returned to the main menu.")
            await self.main_menu(update, context)
            return ConversationHandler.END
        return ConversationHandler.END

    async def entering_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        user = update.effective_user
        try:
            amount = float(text.replace(',', '.'))
            if amount <= 0:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                return self.ENTERING_AMOUNT
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return self.ENTERING_AMOUNT

        context.user_data['amount'] = amount
        currency = context.user_data.get('currency', 'USDT')
        sum_uah = amount * self.bot.config.exchange_rate
        context.user_data['sum_uah'] = sum_uah
        logger.info(
            f"User {user.id} entered amount: {amount} {currency}. Calculated sum: {sum_uah:.2f} UAH.")

        await update.message.reply_text(
            f"‚úÖ –•–æ—Ä–æ—à–æ! –ö –æ–ø–ª–∞—Ç–µ: {sum_uah:.2f} UAH.\n\nüè¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞."
        )
        return self.ENTERING_BANK_NAME

    async def entering_bank_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        bank_name = update.message.text.strip()
        if not bank_name:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
            return self.ENTERING_BANK_NAME

        context.user_data['bank_name'] = bank_name
        logger.info(f"User {update.effective_user.id} entered bank: {bank_name}")
        await update.message.reply_text(
            f"üè¶ –í—ã —É–∫–∞–∑–∞–ª–∏ –±–∞–Ω–∫: {bank_name}\n\nüí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:"
        )
        return self.ENTERING_CARD_DETAILS

    async def entering_card_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        card_info = update.message.text.strip()
        if not card_info:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
            return self.ENTERING_CARD_DETAILS

        context.user_data['card_info'] = card_info
        await update.message.reply_text(f"üí≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {card_info}\n\nüë§ –£–∫–∞–∂–∏—Ç–µ –§–ò–û:")
        return self.ENTERING_FIO_DETAILS

    async def entering_fio_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        fio = update.message.text.strip()
        if not fio:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û.")
            return self.ENTERING_FIO_DETAILS

        context.user_data['fio'] = fio
        await update.message.reply_text(f"üë§ –í—ã —É–∫–∞–∑–∞–ª–∏ –§–ò–û: {fio}\n\nüÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")
        return self.ENTERING_INN_DETAILS

    async def entering_inn_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        inn = update.message.text.strip()
        if not inn:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù.")
            return self.ENTERING_INN_DETAILS

        context.user_data['inn'] = inn
        amount = context.user_data['amount']
        currency = context.user_data['currency']
        sum_uah = context.user_data['sum_uah']

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
            [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='send_exchange_trx')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
        ]
        await update.message.reply_text(
            f"üí∞ –û–±–º–µ–Ω {amount} {currency} –Ω–∞ {sum_uah:.2f} UAH.\n\n"
            f"üè¶ –ë–∞–Ω–∫: `{context.user_data['bank_name']}`\n"
            f"üë§ –§–ò–û: `{context.user_data['fio']}`\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{context.user_data['card_info']}`\n"
            f"üÜî –ò–ù–ù: `{inn}`\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ü–æ–ª—É—á–∏—Ç—å TRX', –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω TRX –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )
        return self.CONFIRMING_EXCHANGE

    async def confirming_exchange(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data

        if data == 'send_exchange':
            return await self._process_standard_exchange(query, context)
        elif data == 'send_exchange_trx':
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='send_transfer_trx')],
                [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='back_to_menu')]
            ]
            await query.edit_message_text(
                "‚ö° –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã—á—Ç–µ–Ω—ã –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.\n\n"
                "üí° –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
                reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
            )
            return self.CONFIRMING_EXCHANGE_TRX
        elif data == 'back_to_menu':
            await self.main_menu(update, context)
            return ConversationHandler.END
        return ConversationHandler.END

    async def _process_standard_exchange(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE):
        user = query.from_user
        logger.info(f"Creating a standard exchange request for user {user.id}.")

        self.bot.user_sessions[user.id] = context.user_data.copy()

        user_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –Ø —Å–æ–≤–µ—Ä—à–∏–ª(–∞) –ø–µ—Ä–µ–≤–æ–¥",
                                 callback_data=f"user_confirms_sending_{user.id}")
        ]])

        await query.edit_message_text(
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"üíµ –°—É–º–º–∞: {context.user_data['amount']} {context.user_data['currency']} ‚Üí {context.user_data['sum_uah']:.2f} UAH\n\n"
            f"üè¶ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n`{self.bot.config.wallet_address}`\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à–∞.",
            parse_mode='Markdown', reply_markup=user_keyboard
        )

        text_for_admin, admin_keyboard = self._prepare_admin_notification(user, context.user_data)
        await self._send_admin_notification(user.id, text_for_admin, admin_keyboard)

        return ConversationHandler.END

    async def confirming_exchange_trx(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        if query.data == 'send_transfer_trx':
            await query.edit_message_text(
                "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ TRX.\n\nüì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à TRX-–∫–æ—à–µ–ª–µ–∫:",
                parse_mode='Markdown'
            )
            return self.ENTERING_TRX_ADDRESS
        elif query.data == 'back_to_menu':
            await self.main_menu(update, context)
            return ConversationHandler.END
        return ConversationHandler.END

    async def entering_trx_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        trx_address = update.message.text.strip()
        if not trx_address:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return self.ENTERING_TRX_ADDRESS

        context.user_data['trx_address'] = trx_address
        amount = context.user_data['amount']
        final_amount = amount - 15
        final_sum_uah = final_amount * self.bot.config.exchange_rate

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange_with_trx')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
        ]
        await update.message.reply_text(
            f"üìã –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            f"üí∞ –û–±–º–µ–Ω: {amount} {context.user_data['currency']} ‚Üí {context.user_data['sum_uah']:.2f} UAH\n"
            f"‚ö° –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX.\n\n"
            f"üí± –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: {final_amount} {context.user_data['currency']} ‚Üí {final_sum_uah:.2f} UAH\n\n"
            f"üîó TRX-–∞–¥—Ä–µ—Å: {trx_address}\n\nüëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )
        return self.FINAL_CONFIRMING_EXCHANGE_TRX

    async def final_confirming_exchange_trx(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user = query.from_user

        if query.data == 'send_exchange_with_trx':
            self.bot.user_sessions[user.id] = context.user_data.copy()

            await query.message.chat.send_message(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
                "üè¶ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ TRX ‚úÖ",
                parse_mode='Markdown'
            )

            text_for_admin, admin_keyboard = self._prepare_admin_notification(
                user, context.user_data, needs_trx=True)
            await self._send_admin_notification(user.id, text_for_admin, admin_keyboard)

            return ConversationHandler.END
        elif query.data == 'back_to_menu':
            await self.main_menu(update, context)
            return ConversationHandler.END
        return ConversationHandler.END

    async def ask_for_hash(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        context.user_data['session_user_id'] = user_id
        await query.edit_message_text(text="‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        return self.ENTERING_HASH

    async def process_hash(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        submitted_hash = update.message.text
        session_user_id = context.user_data.get('session_user_id')

        session = self.bot.user_sessions.get(session_user_id)
        if not session:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
            return ConversationHandler.END

        base_admin_text = session.get('admin_text_after_trx') or session.get('admin_text')
        final_admin_text = base_admin_text + \
            f"\n\n‚úÖ2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥. Hash: `{submitted_hash}`"
        session['admin_text'] = final_admin_text

        admin_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã",
                                 callback_data=f"confirm_payment_{session_user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_request_{session_user_id}")
        ]])

        await self._update_admin_messages(session, final_admin_text, admin_keyboard)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à —Ö—ç—à –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return ConversationHandler.END

    # --- Admin Callback Handlers ---

    async def handle_transfer_confirmation_trx(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        session = self.bot.user_sessions.get(user_id)
        if not session:
            return

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –Ø —Å–æ–≤–µ—Ä—à–∏–ª(–∞) –ø–µ—Ä–µ–≤–æ–¥",
                                 callback_data=f"user_confirms_sending_{user_id}")
        ]])
        await context.bot.send_message(
            chat_id=user_id,
            text=(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ TRX –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n"
                  f"üì• –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {(session['amount'] - 15):.2f} {session['currency']} –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n"
                  f"`{self.bot.config.wallet_address}`\n\n"
                  "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."),
            reply_markup=keyboard, parse_mode='Markdown'
        )

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_request_{user_id}")
        ]])
        updated_text = session.get('admin_text', '') + \
            "\n\n‚úÖ1Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ TRX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        session['admin_text_after_trx'] = updated_text
        await self._update_admin_messages(session, updated_text, keyboard)

    async def handle_payment_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞.")

        session = self.bot.user_sessions.get(user_id, {})
        updated_text = session.get('admin_text', '') + \
            f"\n\n‚úÖ3Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
        session['admin_text'] = updated_text
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É —Å–¥–µ–ª–∞–Ω",
                                 callback_data=f"confirm_transfer_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_request_{user_id}")
        ]])
        await self._update_admin_messages(session, updated_text, keyboard)

    async def handle_transfer_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",
                                  callback_data=f"by_user_confirm_transfer_{user_id}")]
        ])
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. üí∏\n\n"
                 "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ü§ù\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.",
            reply_markup=keyboard, parse_mode='Markdown'
        )

        session = self.bot.user_sessions.get(user_id, {})
        updated_text = session.get('admin_text', '') + \
            "\n\n‚úÖ4Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
        session['admin_text'] = updated_text
        await self._update_admin_messages(session, updated_text, None)

    async def handle_decline_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        admin_user = query.from_user

        support_contact = self.bot.config.support_contact
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: {support_contact}"
        )

        session = self.bot.user_sessions.get(user_id)
        if session:
            updated_text = session.get(
                'admin_text', '') + f"\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê (–∞–¥–º–∏–Ω @{admin_user.username or admin_user.id})"
            await self._update_admin_messages(session, updated_text, None)
            del self.bot.user_sessions[user_id]
        else:
            await query.edit_message_text(
                query.message.text + f"\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê", reply_markup=None
            )

    async def handle_by_user_transfer_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = int(query.data.split('_')[-1])
        session = self.bot.user_sessions.get(user_id)
        if not session:
            await query.edit_message_text("‚è≥ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. \nüîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. \nüöÄ /start", reply_markup=None)
            return

        # Update the admin message
        updated_text = session.get('admin_text', '') + \
            "\n\n‚úÖüõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤. üõë‚úÖ"
        session['admin_text'] = updated_text
        await self._update_admin_messages(session, updated_text, None)

        # Remove the button for the user
        await query.edit_message_text(
            text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. üí∏\n\n"
                 "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ü§ù\n\n"
                 "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ.",
            reply_markup=None,
            parse_mode='Markdown'
        )

        # Delete the session after full completion
        if user_id in self.bot.user_sessions:
            del self.bot.user_sessions[user_id]

    # --- Helper Methods ---

    def _prepare_admin_notification(self, user, user_data, needs_trx=False):
        """Prepares the text and keyboard for the administrator notification."""
        user_info_block = (f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                           f"üÜî ID: `{user.id}`\n"
                           f"üìõ –ò–º—è: `{user.first_name or '-'}`\n"
                           f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n\n")
        transfer_details_block = (f"üè¶ –ë–∞–Ω–∫: `{user_data['bank_name']}`\n"
                                  f"üìù –§–ò–û: `{user_data['fio']}`\n"
                                  f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{user_data['card_info']}`\n"
                                  f"üìá –ò–ù–ù: `{user_data['inn']}`\n\n")
        if needs_trx:
            amount, sum_uah = user_data['amount'], user_data['sum_uah']
            final_amount = amount - 15
            final_sum_uah = final_amount * self.bot.config.exchange_rate
            text = (f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Å TRX)\n\n"
                    f"üí± {amount} {user_data['currency']} ‚Üí {sum_uah:.2f} UAH\n"
                    f"üíµ –ü–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ TRX: {final_amount} {user_data['currency']} ‚Üí {final_sum_uah:.2f} UAH\n\n"
                    f"{user_info_block}{transfer_details_block}"
                    f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ TRX.\nüì¨ TRX-–∞–¥—Ä–µ—Å: `{user_data['trx_address']}`")
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ TRX –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ",
                                     callback_data=f"confirm_trx_transfer_{user.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_request_{user.id}")
            ]])
        else:
            text = (f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
                    f"üí± {user_data['amount']} {user_data['currency']} ‚Üí {user_data['sum_uah']:.2f} UAH\n\n"
                    f"{user_info_block}{transfer_details_block}")
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_request_{user.id}")
            ]])
        return text, keyboard

    async def _send_admin_notification(self, user_id, text, keyboard):
        """Sends notifications to all administrators."""
        admin_ids = self.bot.config.admin_ids
        if not admin_ids:
            return

        session = self.bot.user_sessions.get(user_id)
        if not session:
            return

        admin_message_ids = {}
        for admin_id in admin_ids:
            try:
                msg = await self.bot.application.bot.send_message(
                    chat_id=admin_id, text=text, parse_mode='Markdown', reply_markup=keyboard
                )
                admin_message_ids[admin_id] = msg.message_id
            except Exception as e:
                logger.error(f"Failed to send message to admin {admin_id}: {e}")

        session['admin_message_ids'] = admin_message_ids
        session['admin_text'] = text

    async def _update_admin_messages(self, session, text, reply_markup):
        """Updates messages for all administrators."""
        admin_message_ids = session.get('admin_message_ids', {})
        for admin_id, message_id in admin_message_ids.items():
            try:
                await self.bot.application.bot.edit_message_text(
                    chat_id=admin_id, message_id=message_id, text=text,
                    reply_markup=reply_markup, parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to update message for admin {admin_id}: {e}")

    def setup_handlers(self, application):
        """Creates and registers all handlers related to the exchange process."""

        exchange_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                self.handle_menu_callback, pattern='^(exchange|rate|user_help|back_to_menu)$')],
            states={
                self.CHOOSING_CURRENCY: [CallbackQueryHandler(self.choosing_currency, pattern='^(currency_usdt|back_to_menu)$')],
                self.ENTERING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_amount)],
                self.ENTERING_BANK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_bank_name)],
                self.ENTERING_CARD_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_card_details)],
                self.ENTERING_FIO_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_fio_details)],
                self.ENTERING_INN_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_inn_details)],
                self.CONFIRMING_EXCHANGE: [CallbackQueryHandler(self.confirming_exchange, pattern='^(send_exchange|send_exchange_trx|back_to_menu)$')],
                self.CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(self.confirming_exchange_trx, pattern='^(send_transfer_trx|back_to_menu)$')],
                self.ENTERING_TRX_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.entering_trx_address)],
                self.FINAL_CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(self.final_confirming_exchange_trx, pattern='^(send_exchange_with_trx|back_to_menu)$')],
            },
            fallbacks=[CommandHandler('start', self.cancel_and_restart)],
            per_message=False
        )

        hash_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                self.ask_for_hash, pattern=r'^user_confirms_sending_')],
            states={
                self.ENTERING_HASH: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_hash)],
            },
            fallbacks=[CommandHandler('start', self.cancel_and_restart)],
        )

        application.add_handler(exchange_conv_handler)
        application.add_handler(hash_conv_handler)

        application.add_handler(CallbackQueryHandler(
            self.handle_decline_request, pattern=r'^decline_request_'))
        application.add_handler(CallbackQueryHandler(
            self.handle_payment_confirmation, pattern=r'^confirm_payment_'))
        application.add_handler(CallbackQueryHandler(
            self.handle_transfer_confirmation, pattern=r'^confirm_transfer_'))
        application.add_handler(CallbackQueryHandler(
            self.handle_transfer_confirmation_trx, pattern=r'^confirm_trx_transfer_'))
        application.add_handler(CallbackQueryHandler(
            self.handle_by_user_transfer_confirmation, pattern=r'^by_user_confirm_transfer_'))

        application.add_handler(CommandHandler('start', self.start_command))
