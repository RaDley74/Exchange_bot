import logging
from telegram.ext import (
    ConversationHandler, ContextTypes
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ config_manager
from config_manager import config, save_config, get_admin_ids

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    ASK_PASSWORD,
    ADMIN_MENU,
    SETTINGS_MENU,
    SET_NEW_PASSWORD,
    SET_EXCHANGE_RATE,
    SET_WALLET,
    SET_SUPPORT
) = range(7)

async def admin_panel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) trying to access admin panel.")

    admin_ids = get_admin_ids()

    if not admin_ids:
        logger.warning("Admin panel access denied: Bot not activated (no admin_chat_id).")
        await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n‚ö†Ô∏è –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start ‚ñ∂Ô∏è")
        return ConversationHandler.END

    if user.id not in admin_ids:
        logger.warning(f"User {user.id} ({user.username}) denied access to admin panel.")
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    logger.info(f"Admin {user.id} ({user.username}) is being asked for password.")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    return ASK_PASSWORD


async def admin_panel_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entered_password = update.message.text.strip()
    correct_password = config['Settings']['admin_password']
    user = update.effective_user

    if entered_password == correct_password:
        logger.info(f"Admin {user.id} ({user.username}) entered correct password.")
        return await admin_panel_menu(update, context)
    else:
        logger.warning(f"Admin {user.id} ({user.username}) entered incorrect password.")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ASK_PASSWORD


async def admin_panel_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Displaying main admin menu for {update.effective_user.id}.")
    keyboard = [
        [
            InlineKeyboardButton("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='admin_info'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings'),
        ],
    ]
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return ADMIN_MENU


async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    logger.info(f"Admin {user.id} ({user.username}) selected admin panel option: {data}")

    admin_ids = get_admin_ids()

    if user.id not in admin_ids:
        logger.warning(f"Non-admin user {user.id} tried to use admin panel via callback.")
        await query.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    if data == 'admin_info':
        exchange_rate = config['Settings'].get('exchange_rate', '‚Äî')
        wallet = config['Settings'].get('wallet_address', '‚Äî')
        support = config['Settings'].get('support_contact', '‚Äî')
        masked_password = '*' * len(config['Settings'].get('admin_password', ''))
        admin_ids_str = ', '.join(map(str, admin_ids))

        text = (
            "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
            f"üë§ <b>Admin IDs:</b> <code>{admin_ids_str}</code>\n"
            f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{masked_password}</code>\n"
            f"üí± <b>–ö—É—Ä—Å:</b> <code>{exchange_rate}</code>\n"
            f"üíº <b>–ö–æ—à–µ–ª—ë–∫:</b> <code>{wallet}</code>\n"
            f"üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> <code>{support}</code>"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')
        return ADMIN_MENU

    elif data == 'admin_settings':
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª—å", callback_data='admin_set_password')],
            [InlineKeyboardButton("üí± –ö—É—Ä—Å", callback_data='admin_set_exchange_rate')],
            [InlineKeyboardButton("üíº –ö–æ—à–µ–ª—ë–∫", callback_data='admin_set_wallet')],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='admin_set_support')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')],
        ])
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
        return SETTINGS_MENU

    elif data == 'admin_back_menu':
        return await admin_panel_menu(update, context)

    elif data == 'admin_set_password':
        await query.edit_message_text("üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        return SET_NEW_PASSWORD

    elif data == 'admin_set_exchange_rate':
        await query.edit_message_text("üí± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 41.5):")
        return SET_EXCHANGE_RATE

    elif data == 'admin_set_wallet':
        await query.edit_message_text("üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
        return SET_WALLET

    elif data == 'admin_set_support':
        await query.edit_message_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
        return SET_SUPPORT

    else:
        logger.warning(f"Admin {user.id} triggered an unknown admin command: {data}")
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>.",
            parse_mode='HTML'
        )
        return ADMIN_MENU


async def set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_password = update.message.text.strip()
    user = update.effective_user
    config['Settings']['admin_password'] = new_password
    await save_config()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    logger.info(f"Admin {user.id} updated the password.")
    await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def set_exchange_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_rate = update.message.text.strip()
    user = update.effective_user
    try:
        float(new_rate)
        config['Settings']['exchange_rate'] = new_rate
        await save_config()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        logger.info(f"Admin {user.id} updated exchange rate to: {new_rate}")
        await update.message.reply_text("‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except ValueError:
        logger.warning(f"Admin {user.id} entered invalid exchange rate: {new_rate}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    return await admin_panel_menu(update, context)


async def set_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_wallet = update.message.text.strip()
    user = update.effective_user
    config['Settings']['wallet_address'] = new_wallet
    await save_config()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    logger.info(f"Admin {user.id} updated wallet address.")
    await update.message.reply_text("‚úÖ –ö–æ—à–µ–ª—ë–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def set_support_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_support = update.message.text.strip()
    user = update.effective_user
    if not re.fullmatch(r"[A-Za-z0-9@._\- ]+", new_support):
        logger.warning(f"Admin {user.id} entered invalid support contact: {new_support}")
        await update.message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã @ . _ -")
        return SET_SUPPORT
    else:
        config['Settings']['support_contact'] = new_support
        await save_config()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        logger.info(f"Admin {user.id} updated support contact.")
        await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def admin_panel_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    admin_ids = get_admin_ids()

    if user.id not in admin_ids:
        logger.warning(f"Non-admin user {user.id} tried to close admin panel.")
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    logger.info(f"Admin {user.id} closed the admin panel.")
    await update.message.reply_text("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    return ConversationHandler.END