import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
import configparser

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
config = configparser.ConfigParser()
config.read('settings.ini')

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    ASK_PASSWORD,
    ADMIN_MENU,
    SETTINGS_MENU,
    SET_NEW_PASSWORD,
    SET_EXCHANGE_RATE,
    SET_WALLET,
    SET_SUPPORT
) = range(7)

# /start ‚Äî –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å


async def admin_panel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = config['User'].getint('admin_chat_id', None)
    print(f"Admin ID: {admin_id} | User ID: {update.effective_user.id}")
    if admin_id is None:
        await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n‚ö†Ô∏è –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start ‚ñ∂Ô∏è")
        return ConversationHandler.END
    elif update.effective_user.id != admin_id:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    return ASK_PASSWORD


# –≠—Ç–∞–ø ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async def admin_panel_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entered_password = update.message.text.strip()
    correct_password = config['Settings']['admin_password']
    print(f"Entered Password: {entered_password} | Correct Password: {correct_password}")
    if entered_password == correct_password:
        return await admin_panel_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ASK_PASSWORD


# –≠—Ç–∞–ø ‚Äî –º–µ–Ω—é
async def admin_panel_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='admin_info'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings'),
            # InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')
        ],
    ]
    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    admin_id = config['User'].getint('admin_chat_id', None)

    if update.effective_user.id != admin_id:
        await query.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    if data == 'admin_info':

        exchange_rate = config['Settings'].get('exchange_rate', '‚Äî')
        wallet = config['Settings'].get('wallet_address', '‚Äî')
        support = config['Settings'].get('support_contact', '‚Äî')
        masked_password = '*' * len(config['Settings'].get('admin_password', ''))

        text = (
            "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
            f"üë§ <b>Admin ID:</b> <code>{admin_id}</code>\n"
            f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{masked_password}</code>\n"
            f"üí± <b>–ö—É—Ä—Å:</b> <code>{exchange_rate}</code>\n"
            f"üíº <b>–ö–æ—à–µ–ª—ë–∫:</b> <code>{wallet}</code>\n"
            f"üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> <code>{support}</code>"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

    elif data == 'admin_settings':

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª—å", callback_data='set_password')],
            [InlineKeyboardButton("üí± –ö—É—Ä—Å", callback_data='set_exchange_rate')],
            [InlineKeyboardButton("üíº –ö–æ—à–µ–ª—ë–∫", callback_data='set_wallet')],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='set_support')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_back_menu')],
        ])
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
        return SETTINGS_MENU

    elif data == 'admin_back_menu':
        await query.message.delete()
        return await admin_panel_menu(query, context)

    elif data == 'set_password':
        await query.edit_message_text("üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        return SET_NEW_PASSWORD

    elif data == 'set_exchange_rate':
        await query.edit_message_text("üí± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5):")
        return SET_EXCHANGE_RATE

    elif data == 'set_wallet':
        await query.edit_message_text("üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
        return SET_WALLET

    elif data == 'set_support':
        await query.edit_message_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
        return SET_SUPPORT

    else:
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>.\n\n"
            "üõë <i>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.</i>\n"
            "üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /ac",
            parse_mode='HTML'
        )

        return ADMIN_MENU


async def set_new_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config['Settings']['admin_password'] = update.message.text.strip()
    with open('settings.ini', 'w') as config_file:
        config.write(config_file)
    await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def set_exchange_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config['Settings']['exchange_rate'] = update.message.text.strip()
    with open('settings.ini', 'w') as config_file:
        config.write(config_file)
    await update.message.reply_text("‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def set_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config['Settings']['wallet_address'] = update.message.text.strip()
    with open('settings.ini', 'w') as config_file:
        config.write(config_file)
    await update.message.reply_text("‚úÖ –ö–æ—à–µ–ª—ë–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def set_support_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if not re.fullmatch(r"[A-Za-z0-9@._\- ]+", update.message.text.strip()):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã @ . _ -")
        return SET_SUPPORT
    else:
        config['Settings']['support_contact'] = update.message.text.strip()

    with open('settings.ini', 'w') as config_file:
        config.write(config_file)
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await admin_panel_menu(update, context)


async def admin_panel_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = config['User'].getint('admin_chat_id', None)

    if update.effective_user.id != admin_id:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    await update.message.reply_text("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    return ConversationHandler.END
