from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, MenuButtonCommands
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import configparser
import os
import admin_panel
import warnings


warnings.filterwarnings("ignore", category=UserWarning)

ASK_PASSWORD, ADMIN_MENU = range(2)

(
    CHOOSING_CURRENCY,
    ENTERING_AMOUNT,
    ENTERING_BANK_NAME,
    ENTERING_CARD_DETAILS,
    ENTERING_FIO_DETAILS,
    ENTERING_INN_DETAILS,
    CONFIRMING_EXCHANGE,
    CONFIRMING_EXCHANGE_TRX,
    ENTERING_TRX_ADDRESS,
    FINAL_CONFIRMING_EXCHANGE_TRX
) = range(10)

config_file_name = 'settings.ini'
config = configparser.ConfigParser()
user_sessions = {}

if not os.path.exists(config_file_name):
    config['User'] = {
        'TOKEN': 'your_token_here',
        'ADMIN_CHAT_ID': 'your_admin_chat_id_here',
    }
    config['Settings'] = {
        'EXCHANGE_RATE': '41.2',
        'ADMIN_PASSWORD': 'your_admin_id_here',
        'WALLET_ADDRESS': 'your_wallet_address_here',
        'SUPPORT_CONTACT': 'your_support_contact_here'
    }

    with open(config_file_name, 'w') as config_file:
        config.write(config_file)

    print(
        f"Configuration file '{config_file_name}' created. Please edit it with your token and admin chat ID, then restart the script.")
    input("Press Enter to exit...")
    exit(0)

else:
    config.read(config_file_name)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config.read(config_file_name)
    context.bot_data['ADMIN_CHAT_ID'] = int(config['User']['admin_chat_id'])

    keyboard = [
        [
            InlineKeyboardButton("‚û∏ –û–±–º–µ–Ω—è—Ç—å", callback_data='exchange'),
            # InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='get_trx'),
            InlineKeyboardButton("üìâ –ö—É—Ä—Å", callback_data='rate'),

        ],
        # [
        #     InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data='status'),
        #     InlineKeyboardButton("üè∞ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data='referral'),
        #     InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data='help'),
        # ]
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto-Exchange Bot üí±\n\n"
        "üß≤ –û–±–º–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π.\n\n"
        "üåü –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'rate':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(f"üìâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {float(config['Settings']['exchange_rate'])} UAH", reply_markup=InlineKeyboardMarkup(keyboard))

    # elif data == 'get_trx':
    #     await query.edit_message_text("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TRX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:")
    #     return ENTERING_TRX_AMOUNT

    elif data == 'exchange':
        keyboard = [
            [InlineKeyboardButton("USDT", callback_data='currency_usdt')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text("üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSING_CURRENCY

    # elif data == 'status':
    #     await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    # elif data == 'referral':
    #     await query.edit_message_text(
    #         "üåü –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã! –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/–¢–≤–æ–π–ë–æ—Ç?start=ref")

    # elif data == 'help':
    #     await query.edit_message_text("üîß –ü–æ–º–æ—â—å: –ù–∞–ø–∏—à–∏ @admin –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º")

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def choosing_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'currency_usdt':
        context.user_data['currency'] = 'USDT'
        await query.message.chat.send_message(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–≤ {context.user_data['currency']}):")
        return ENTERING_AMOUNT

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def entering_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        amount = float(text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return ENTERING_AMOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ENTERING_AMOUNT

    context.user_data['amount'] = amount
    currency = context.user_data.get('currency', 'USDT')
    sum_uah = amount * float(config['Settings']['exchange_rate'])
    context.user_data['sum_uah'] = sum_uah
    # keyboard = [
    #     [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
    #     [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    # ]

    # await update.message.reply_text(
    #     f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {amount} {currency} –ø–æ –∫—É—Ä—Å—É {EXCHANGE_RATE}.\n"
    #     f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {sum_uah:.2f} UAH.\n\n–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
    #     reply_markup=InlineKeyboardMarkup(keyboard)
    # )
    # return CONFIRMING_EXCHANGE
    await update.message.reply_text(
        f"‚úÖ –•–æ—Ä–æ—à–æ! –ö –æ–ø–ª–∞—Ç–µ: {sum_uah:.2f} UAH.\n\nüè¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–±–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫', '–ú–æ–Ω–æ–±–∞–Ω–∫' –∏ —Ç.–¥.).\n"
    )
    return ENTERING_BANK_NAME  # ‚Üê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def entering_bank_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bank_name = update.message.text.strip()
    if not bank_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
        return ENTERING_BANK_NAME

    context.user_data['bank_name'] = bank_name

    await update.message.reply_text(
        f"üè¶ –í—ã —É–∫–∞–∑–∞–ª–∏ –±–∞–Ω–∫: {bank_name}\n\n"
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ IBAN):"
    )

    return ENTERING_CARD_DETAILS


async def entering_card_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card_info = update.message.text.strip()
    if not card_info:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
        return ENTERING_CARD_DETAILS

    context.user_data['card_info'] = card_info

    await update.message.reply_text(
        f"üí≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {card_info}\n\n"
        f"üë§ –£–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:"
    )

    return ENTERING_FIO_DETAILS


async def entering_fio_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if not fio:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û.")
        return ENTERING_FIO_DETAILS

    context.user_data['fio'] = fio

    await update.message.reply_text(
        f"üë§ –í—ã —É–∫–∞–∑–∞–ª–∏ –§–ò–û: {fio}\n\n"
        "üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù (–Ü–ü–ù/–ï–î–†–ü–û–£):"
    )

    return ENTERING_INN_DETAILS


async def entering_inn_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inn = update.message.text.strip()
    if not inn:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù.")
        return ENTERING_INN_DETAILS

    await update.message.reply_text(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ –ò–ù–ù: {inn}\n\n"
    )

    context.user_data['inn'] = inn
    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
        [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='send_exchange_trx')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    ]

    await update.message.reply_text(
        f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {amount} {currency} –Ω–∞ {sum_uah:.2f} UAH.\n\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        f"üë§ –§–ò–û: {fio}\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: {context.user_data['card_info']}\n"
        f"üÜî –ò–ù–ù: {inn}\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "‚ö° –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω TRX, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    return CONFIRMING_EXCHANGE


async def confirming_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –î–∞–Ω–Ω—ã–µ –∏–∑ user_data
    amount = context.user_data.get('amount')
    currency = context.user_data.get('currency', 'USDT')
    sum_uah = context.user_data.get('sum_uah', 0)
    fio = context.user_data.get('fio', '')
    bank_name = context.user_data.get('bank_name', '')
    inn = context.user_data.get('inn', '')
    card_info = context.user_data.get('card_info', '')

    user = update.effective_user

    user_sessions[update.effective_user.id] = context.user_data.copy()

    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üÜî ID: `{user.id}`\n"
        f"üìõ –ò–º—è: `{user.first_name or '-'}`\n"
        f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
    )

    transfer_info = (
        f"üè¶ –ë–∞–Ω–∫: `{bank_name}`\n"
        f"üìù –§–ò–û: `{fio}`\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{card_info}`\n"
        f"üìá –ò–ù–ù: `{inn}`\n\n"
    )

    if data == 'send_exchange':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞—è–≤–∫—É
        await query.message.chat.send_message(
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"üíµ –°—É–º–º–∞: {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"
            f"üè¶ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"`{config['Settings']['wallet_address']}`",
            parse_mode='Markdown'
        )

        admin_chat_id = config['User']['ADMIN_CHAT_ID']

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω", callback_data=f"confirm_payment_{user.id}")
        ]])

        admin_msg = await context.bot.send_message(
            chat_id=admin_chat_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
                f"üí± {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"

                f"{user_info}"
                f"{transfer_info}"
            ),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        user_sessions[user.id]['admin_message_id'] = admin_msg.message_id
        user_sessions[user.id]['admin_chat_id'] = admin_msg.chat_id
        # await start(update, context)
        return ConversationHandler.END

    elif data == 'send_exchange_trx':
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å 15 USDT –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='send_transfer_trx')],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='back_to_menu')]
        ])

        await query.edit_message_text(
            "‚ö° –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–Ω—è—Ç—ã –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.\n\n"
            "üí° –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
            reply_markup=keyboard, parse_mode='Markdown'
        )
        return CONFIRMING_EXCHANGE_TRX

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    else:
        # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö callback_data
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        await start(update, context)
        return ConversationHandler.END


async def confirming_exchange_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'send_transfer_trx':
        await query.edit_message_text(
            "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ **15 USDT** –≤ TRX.\n\n"
            "üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ TRX-–∫–æ—à–µ–ª—å–∫–∞:",
            parse_mode='Markdown'
        )

        return ENTERING_TRX_ADDRESS

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END


async def entering_trx_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trx_address = update.message.text.strip()
    if not trx_address:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return ENTERING_TRX_ADDRESS

    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    inn = context.user_data['inn']
    context.user_data['trx_address'] = trx_address

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    ]

    await update.message.reply_text(
        f"üìã –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"üí∞ –û–±–º–µ–Ω: {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        f"üë§ –§–ò–û: {fio}\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: {context.user_data['card_info']}\n"
        f"üÜî –ò–ù–ù: {inn}\n\n"
        f"‚ö° –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n\n"
        f"üí± –°—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º TRX: {amount - 15} {currency} ‚Üí {(amount - 15) * float(config['Settings']['exchange_rate']):.2f} UAH\n\n"
        f"üîó TRX-–∞–¥—Ä–µ—Å: {trx_address}\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    return FINAL_CONFIRMING_EXCHANGE_TRX


async def final_confirming_exchange_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –î–∞–Ω–Ω—ã–µ –∏–∑ user_data
    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    inn = context.user_data['inn']
    trx_address = context.user_data.get('trx_address', '')
    card_info = context.user_data['card_info']

    user = update.effective_user
    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üÜî ID: `{user.id}`\n"
        f"üìõ –ò–º—è: `{user.first_name or '-'}`\n"
        f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
    )

    transfer_info = (
        f"üè¶ –ë–∞–Ω–∫: `{bank_name}`\n"
        f"üìù –§–ò–û: `{fio}`\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{card_info}`\n"
        f"üìá –ò–ù–ù: `{inn}`\n\n"
        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n"
        f"üì¨ TRX-–∞–¥—Ä–µ—Å: `{trx_address}`\n"
    )

    if data == 'send_exchange':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞—è–≤–∫—É
        await query.message.chat.send_message(
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"üí∞ –ò–∑ –æ–±—â–µ–π —Å—É–º–º—ã {amount:.2f} {currency}, –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n\n"
            f"üíµ –ö–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: {amount-15} {currency} = {(amount-15) * float(config['Settings']['exchange_rate']):.2f} UAH\n\n"
            f"üè¶ –û–∂–∏–¥–∞–π—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ TRX ‚úÖ\n",
            parse_mode='Markdown'
        )

        admin_chat_id = config['User']['ADMIN_CHAT_ID']

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ TRX –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ",
                                 callback_data=f"confirm_trx_transfer_{user.id}")
        ]])

        admin_msg = await context.bot.send_message(
            chat_id=admin_chat_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
                f"üí± {amount} {currency} = {sum_uah:.2f} UAH\n\n"
                f"üíµ –ü–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ TRX: {amount-15} {currency} ‚Üí {((amount-15) * float(config['Settings']['exchange_rate'])):.2f} UAH\n\n"
                f"{user_info}"
                f"{transfer_info}"
            ),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω–∏–º message_id –∏ chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_sessions[user.id]['admin_message_id'] = admin_msg.message_id
        user_sessions[user.id]['admin_chat_id'] = admin_msg.chat_id

        # await start(update, context)
        return ConversationHandler.END

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    else:
        # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö callback_data
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        await start(update, context)
        return ConversationHandler.END


async def handle_transfer_confirmation_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    data = query.data  # confirm_payment_12345678
    user_id = int(data.split('_')[-1])

    session = user_sessions.get(user_id)

    if session:
        amount = session.get('amount', 0)
        currency = session.get('currency', 'USDT')
    else:
        amount = 0
        currency = 'USDT'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ TRX –≤—ã–ø–æ–ª–Ω–µ–Ω. \n\n"
                f"üì• –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {(amount - 15):.2f} {currency} –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏ –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:\n"
                f"`{config['Settings']['wallet_address']}`"
            ),
            parse_mode='Markdown'
        )
        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ TRX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã",
                                  callback_data=f"confirm_payment_{user_id}")]
        ])
        await query.edit_message_text(updated_text, reply_markup=keyboard)

    except Exception as e:
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    data = query.data  # confirm_payment_12345678
    user_id = int(data.split('_')[-1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã. \n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞."
        )
        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É —Å–¥–µ–ª–∞–Ω",
                                  callback_data=f"confirm_transfer_{user_id}")]
        ])
        await query.edit_message_text(updated_text, reply_markup=keyboard)
    except Exception as e:
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def handle_transfer_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = int(data.split('_')[-1])

    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂",
                                  callback_data=f"user_confirm_transfer_{user_id}")]
        ])

        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. üí∏\n\nüôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ü§ù",
            reply_markup=keyboard
        )

        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞."
        await query.edit_message_text(updated_text)
        user_sessions[user_id]['admin_text'] = updated_text

    except Exception as e:
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def handle_user_confirm_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = int(data.split('_')[-1])

    try:
        session = user_sessions.get(user_id)
        admin_message_id = session.get('admin_message_id')
        # admin_chat_id = session.get('admin_chat_id')

        # –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ."

        await query.edit_message_text(updated_text)

        # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø–æ user_id
        admin_chat_id = int(config['User']['ADMIN_CHAT_ID'])

        message = await context.bot.edit_message_text(
            chat_id=admin_chat_id,
            message_id=admin_message_id,
            text=session.get('admin_text', '') + "\n\n‚úÖüõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥. üõë‚úÖ ",
            parse_mode='Markdown'
        )

    except Exception as e:
        await query.edit_message_text(query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞: {e} \n\n –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –ª–∏—Ü–æ–º: {config['Settings']['SUPPORT_CONTACT']}")


def main():
    print("Starting the bot...")

    application = ApplicationBuilder().token(config['User']['TOKEN']).build()
    bot = Bot(token=config['User']['TOKEN'])

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu)],
        states={
            CHOOSING_CURRENCY: [CallbackQueryHandler(choosing_currency)],
            ENTERING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_amount)],
            ENTERING_BANK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_bank_name)],
            ENTERING_CARD_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_card_details)],
            ENTERING_FIO_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_fio_details)],
            ENTERING_INN_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_inn_details)],
            CONFIRMING_EXCHANGE: [CallbackQueryHandler(confirming_exchange)],
            CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(confirming_exchange_trx)],
            ENTERING_TRX_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_trx_address)],
            FINAL_CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(final_confirming_exchange_trx)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    admin_handler = ConversationHandler(
        entry_points=[CommandHandler('a', admin_panel.admin_panel_start)],
        states={
            ASK_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.admin_panel_password)],
            ADMIN_MENU: [CallbackQueryHandler(admin_panel.admin_panel_handler)],
        },
        fallbacks=[CommandHandler('a', admin_panel.admin_panel_start)]
    )

    # application.add_handler(CallbackQueryHandler(
    #     admin_panel.admin_panel_handler, pattern='^admin_'))
    # application.add_handler(CallbackQueryHandler(
    #     admin_panel.admin_panel_password))
    application.add_handler(admin_handler)

    application.add_handler(CallbackQueryHandler(
        handle_payment_confirmation, pattern=r'^confirm_payment_'))
    application.add_handler(CallbackQueryHandler(
        handle_transfer_confirmation, pattern=r'^confirm_transfer_'))
    application.add_handler(CallbackQueryHandler(
        handle_transfer_confirmation_trx, pattern=r'^confirm_trx_transfer_'))
    application.add_handler(CallbackQueryHandler(
        handle_user_confirm_transfer, pattern=r'^user_confirm_transfer_'))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('a', admin_panel.admin_panel_start))
    application.add_handler(conv_handler)

    print("Bot started successfully!")
    application.run_polling()


if __name__ == "__main__":
    main()
