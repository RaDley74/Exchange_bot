from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, MenuButtonCommands
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import configparser
import os

(
    CHOOSING_CURRENCY,
    ENTERING_AMOUNT,
    CONFIRMING_EXCHANGE,
    ENTERING_TRX_AMOUNT,
    ENTERING_TRX_ADDRESS,
) = range(5)

config_file_name = 'settings.ini'
config = configparser.ConfigParser()

if not os.path.exists(config_file_name):
    config['User'] = {
        'TOKEN': 'your_token_here',
        'ADMIN_CHAT_ID': 'your_admin_chat_id_here',
    }
    config['Settings'] = {
        'EXCHANGE_RATE': '41.2',
    }

    with open(config_file_name, 'w') as config_file:
        config.write(config_file)

    print(
        f"Configuration file '{config_file_name}' created. Please edit it with your token and admin chat ID, then restart the script.")
    exit(0)

else:
    config.read(config_file_name)

EXCHANGE_RATE = float(config['Settings']['EXCHANGE_RATE'])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚û∏ –û–±–º–µ–Ω—è—Ç—å", callback_data='exchange'),
            # InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='get_trx'),
            InlineKeyboardButton("üìâ –ö—É—Ä—Å", callback_data='rate'),
        ],
        # [
        #     InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data='status'),
        #     InlineKeyboardButton("üè∞ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data='referral'),
        #     InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data='help'),
        # ]
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto-Exchange Bot üí±\n\n"
        "üß≤ –û–±–º–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π.\n\n"
        "üåü –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'rate':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(f"üìâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {EXCHANGE_RATE} UAH", reply_markup=InlineKeyboardMarkup(keyboard))

    # elif data == 'get_trx':
    #     await query.edit_message_text("üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TRX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:")
    #     return ENTERING_TRX_AMOUNT

    elif data == 'exchange':
        keyboard = [
            [InlineKeyboardButton("USDT", callback_data='currency_usdt')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSING_CURRENCY

    # elif data == 'status':
    #     await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    # elif data == 'referral':
    #     await query.edit_message_text(
    #         "üåü –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã! –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/–¢–≤–æ–π–ë–æ—Ç?start=ref")

    # elif data == 'help':
    #     await query.edit_message_text("üîß –ü–æ–º–æ—â—å: –ù–∞–ø–∏—à–∏ @admin –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º")

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def choosing_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'currency_usdt':
        context.user_data['currency'] = 'USDT'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–≤ USDT):")
        return ENTERING_AMOUNT

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def entering_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        amount = float(text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return ENTERING_AMOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ENTERING_AMOUNT

    context.user_data['amount'] = amount
    currency = context.user_data.get('currency', 'USDT')
    sum_uah = amount * EXCHANGE_RATE
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    ]

    await update.message.reply_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {amount} {currency} –ø–æ –∫—É—Ä—Å—É {EXCHANGE_RATE}.\n"
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {sum_uah:.2f} UAH.\n\n–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRMING_EXCHANGE


async def confirming_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    user = update.effective_user
    user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n" \
        f"ID: {user.id}\n" \
        f"–ò–º—è: {user.first_name or '-'}\n" \
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}"

    if data == 'send_exchange':

        amount = context.user_data.get('amount')
        currency = context.user_data.get('currency', 'USDT')
        sum_uah = amount * EXCHANGE_RATE if amount else 0

        await query.message.chat.send_message(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"–°—É–º–º–∞: {amount} {currency} = {sum_uah:.2f} UAH\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"`TMHDhHp3qdT4EuEuFQGWxuZ14EvzDZseac`",
            parse_mode='Markdown'
        )

        admin_chat_id = config['User']['ADMIN_CHAT_ID']

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã", callback_data=f"confirm_payment_{user.id}")]
        ])

        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
                f"üí± {amount} {currency} = {sum_uah:.2f} UAH\n\n"
                f"{user_info}"
            ), reply_markup=keyboard
        )

        await start(update, context)
        return ConversationHandler.END

    elif data == 'back_to_menu':
        await start(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def entering_trx_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        amount = float(text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return ENTERING_TRX_AMOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ENTERING_TRX_AMOUNT

    context.user_data['trx_amount'] = amount
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å TRX –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    return ENTERING_TRX_ADDRESS


async def entering_trx_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trx_address = update.message.text.strip()
    if not trx_address:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return ENTERING_TRX_ADDRESS

    amount = context.user_data.get('trx_amount')
    await update.message.reply_text(
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ {amount} TRX –ø—Ä–∏–Ω—è—Ç–∞.\n"
        f"–ê–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {trx_address}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏."
    )
    return ConversationHandler.END


async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    data = query.data  # confirm_payment_12345678
    user_id = int(data.split('_')[-1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        )
        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
        await query.edit_message_text(updated_text)
    except Exception as e:
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


def main():
    print("Starting the bot...")

    application = ApplicationBuilder().token(config['User']['TOKEN']).build()
    bot = Bot(token=config['User']['TOKEN'])
    bot.set_chat_menu_button(menu_button=MenuButtonCommands())

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu)],
        states={
            CHOOSING_CURRENCY: [CallbackQueryHandler(choosing_currency)],
            ENTERING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_amount)],
            CONFIRMING_EXCHANGE: [CallbackQueryHandler(confirming_exchange)],

            ENTERING_TRX_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_trx_amount)],
            ENTERING_TRX_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_trx_address)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    application.add_handler(CallbackQueryHandler(
        handle_payment_confirmation, pattern=r'^confirm_payment_'))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == "__main__":
    main()
