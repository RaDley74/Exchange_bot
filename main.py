import sys
import logging
import warnings
import admin_panel
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
from config_manager import config, load_config, get_admin_ids

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

warnings.filterwarnings("ignore", category=UserWarning)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    CHOOSING_CURRENCY,
    ENTERING_AMOUNT,
    ENTERING_BANK_NAME,
    ENTERING_CARD_DETAILS,
    ENTERING_FIO_DETAILS,
    ENTERING_INN_DETAILS,
    CONFIRMING_EXCHANGE,
    CONFIRMING_EXCHANGE_TRX,
    ENTERING_TRX_ADDRESS,
    FINAL_CONFIRMING_EXCHANGE_TRX,
    ENTERING_HASH,
) = range(11)

user_sessions = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_config()


async def display_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [
            InlineKeyboardButton("‚û∏ –û–±–º–µ–Ω—è—Ç—å", callback_data='exchange'),
            InlineKeyboardButton("üìâ –ö—É—Ä—Å", callback_data='rate'),
            InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data='user_help'),
        ],
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafePay Bot üí±\n\n"
        "üß≤ –û–±–º–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π.\n\n"
        "üåü –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) started the bot.")
    await display_main_menu(update, context)


async def cancel_and_restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) used /start to cancel/restart a conversation.")
    await display_main_menu(update, context)
    return ConversationHandler.END


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    logger.info(f"User {user.id} ({user.username}) selected menu option: {data}")

    if data == 'rate':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(f"üìâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {float(config['Settings']['exchange_rate'])} UAH", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'exchange':
        keyboard = [
            [InlineKeyboardButton("USDT", callback_data='currency_usdt')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text("üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSING_CURRENCY

    elif data == 'user_help':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(
            f"üîß –ü–æ–º–æ—â—å: –ù–∞–ø–∏—à–∏ {config['Settings']['SUPPORT_CONTACT']} –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif data == 'back_to_menu':
        await display_main_menu(update, context)
        return ConversationHandler.END

    return ConversationHandler.END

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ main.py –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é get_admin_ids –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ config –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞,
# —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –∏–∑ config_manager.


async def choosing_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user

    if data == 'currency_usdt':
        context.user_data['currency'] = 'USDT'
        logger.info(
            f"User {user.id} ({user.username}) chose currency: {context.user_data['currency']}")
        await query.message.chat.send_message(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (–≤ {context.user_data['currency']}):")
        return ENTERING_AMOUNT

    elif data == 'back_to_menu':
        logger.info(
            f"User {user.id} ({user.username}) returned to the main menu from currency selection.")
        await display_main_menu(update, context)
        return ConversationHandler.END

    return ConversationHandler.END


async def entering_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    try:
        amount = float(text.replace(',', '.'))
        if amount <= 0:
            logger.warning(
                f"User {user.id} ({user.username}) entered a non-positive amount: {amount}")
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return ENTERING_AMOUNT
    except ValueError:
        logger.warning(f"User {user.id} ({user.username}) entered an invalid amount: '{text}'")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ENTERING_AMOUNT

    context.user_data['amount'] = amount
    currency = context.user_data.get('currency', 'USDT')
    sum_uah = amount * float(config['Settings']['exchange_rate'])
    context.user_data['sum_uah'] = sum_uah
    logger.info(
        f"User {user.id} ({user.username}) entered amount: {amount} {currency}. Calculated sum: {sum_uah:.2f} UAH.")

    await update.message.reply_text(
        f"‚úÖ –•–æ—Ä–æ—à–æ! –ö –æ–ø–ª–∞—Ç–µ: {sum_uah:.2f} UAH.\n\nüè¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫', '–ú–æ–Ω–æ–±–∞–Ω–∫' –∏ —Ç.–¥.).\n"
    )
    return ENTERING_BANK_NAME


async def entering_bank_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bank_name = update.message.text.strip()
    user = update.effective_user
    if not bank_name:
        logger.warning(f"User {user.id} ({user.username}) entered an empty bank name.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
        return ENTERING_BANK_NAME

    context.user_data['bank_name'] = bank_name
    logger.info(f"User {user.id} ({user.username}) entered bank name: {bank_name}")

    await update.message.reply_text(
        f"üè¶ –í—ã —É–∫–∞–∑–∞–ª–∏ –±–∞–Ω–∫: {bank_name}\n\n"
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ IBAN):"
    )

    return ENTERING_CARD_DETAILS


async def entering_card_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card_info = update.message.text.strip()
    user = update.effective_user
    if not card_info:
        logger.warning(f"User {user.id} ({user.username}) entered empty card details.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
        return ENTERING_CARD_DETAILS

    context.user_data['card_info'] = card_info
    logger.info(f"User {user.id} ({user.username}) entered card details.")

    await update.message.reply_text(
        f"üí≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {card_info}\n\n"
        f"üë§ –£–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:"
    )

    return ENTERING_FIO_DETAILS


async def entering_fio_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    user = update.effective_user
    if not fio:
        logger.warning(f"User {user.id} ({user.username}) entered empty FIO.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–ò–û.")
        return ENTERING_FIO_DETAILS

    context.user_data['fio'] = fio
    logger.info(f"User {user.id} ({user.username}) entered FIO.")

    await update.message.reply_text(
        f"üë§ –í—ã —É–∫–∞–∑–∞–ª–∏ –§–ò–û: {fio}\n\n"
        "üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù (–Ü–ü–ù/–ï–î–†–ü–û–£):"
    )

    return ENTERING_INN_DETAILS


async def entering_inn_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inn = update.message.text.strip()
    user = update.effective_user
    if not inn:
        logger.warning(f"User {user.id} ({user.username}) entered empty INN.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù.")
        return ENTERING_INN_DETAILS

    context.user_data['inn'] = inn
    logger.info(f"User {user.id} ({user.username}) entered INN.")

    await update.message.reply_text(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ –ò–ù–ù: {inn}\n\n"
    )

    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
        [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å TRX", callback_data='send_exchange_trx')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    ]

    await update.message.reply_text(
        f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {amount} {currency} –Ω–∞ {sum_uah:.2f} UAH.\n\n"
        f"üè¶ –ë–∞–Ω–∫: `{bank_name}`\n"
        f"üë§ –§–ò–û: `{fio}`\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{context.user_data['card_info']}`\n"
        f"üÜî –ò–ù–ù: `{inn}`\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "‚ö° –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω TRX, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    return CONFIRMING_EXCHANGE


async def confirming_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) is at final confirmation step. Action: {data}")

    amount = context.user_data.get('amount')
    currency = context.user_data.get('currency', 'USDT')
    sum_uah = context.user_data.get('sum_uah', 0)
    fio = context.user_data.get('fio', '')
    bank_name = context.user_data.get('bank_name', '')
    inn = context.user_data.get('inn', '')
    card_info = context.user_data.get('card_info', '')

    user_sessions[user.id] = context.user_data.copy()

    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üÜî ID: `{user.id}`\n"
        f"üìõ –ò–º—è: `{user.first_name or '-'}`\n"
        f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
    )

    transfer_info = (
        f"üè¶ –ë–∞–Ω–∫: `{bank_name}`\n"
        f"üìù –§–ò–û: `{fio}`\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{card_info}`\n"
        f"üìá –ò–ù–ù: `{inn}`\n\n"
    )

    if data == 'send_exchange':
        logger.info(
            f"Creating standard exchange request for user {user.id}. Amount: {amount} {currency}")

        user_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≤–µ—Ä—à–∏–ª(–∞) –ø–µ—Ä–µ–≤–æ–¥",
                                  callback_data=f"user_confirms_sending_{user.id}")]
        ])

        await query.message.chat.send_message(
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"üíµ –°—É–º–º–∞: {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"
            f"üè¶ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"`{config['Settings']['wallet_address']}`\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            parse_mode='Markdown',
            reply_markup=user_keyboard
        )

        admin_ids = get_admin_ids()
        if not admin_ids:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return ConversationHandler.END

        text_for_admin = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
            f"üí± {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"
            f"{user_info}"
            f"{transfer_info}"
        )

        admin_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",
                                 callback_data=f"decline_request_{user.id}")
        ]])

        admin_message_ids = {}
        for admin_id in admin_ids:
            try:
                admin_msg = await context.bot.send_message(
                    chat_id=admin_id,
                    text=text_for_admin,
                    parse_mode='Markdown',
                    reply_markup=admin_keyboard
                )
                admin_message_ids[admin_id] = admin_msg.message_id
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        user_sessions[user.id]['admin_message_ids'] = admin_message_ids
        user_sessions[user.id]['admin_text'] = text_for_admin

        logger.info(f"Exchange request for user {user.id} sent to admins: {admin_ids}")
        return ConversationHandler.END

    elif data == 'send_exchange_trx':
        logger.info(f"User {user.id} chose to receive TRX for commission.")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='send_transfer_trx')],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='back_to_menu')]
        ])

        await query.edit_message_text(
            "‚ö° –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–Ω—è—Ç—ã –∏–∑ –æ–±—â–µ–π —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.\n\n"
            "üí° –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.",
            reply_markup=keyboard, parse_mode='Markdown'
        )
        return CONFIRMING_EXCHANGE_TRX

    elif data == 'back_to_menu':
        logger.info(f"User {user.id} cancelled the exchange.")
        await display_main_menu(update, context)
        return ConversationHandler.END

    else:
        logger.warning(f"User {user.id} triggered an unknown callback: {data}")
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        await display_main_menu(update, context)
        return ConversationHandler.END


async def confirming_exchange_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    logger.info(f"User {user.id} ({user.username}) is confirming TRX commission. Action: {data}")

    if data == 'send_transfer_trx':
        await query.edit_message_text(
            "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ **15 USDT** –≤ TRX.\n\n"
            "üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ TRX-–∫–æ—à–µ–ª—å–∫–∞:",
            parse_mode='Markdown'
        )
        return ENTERING_TRX_ADDRESS

    elif data == 'back_to_menu':
        logger.info(
            f"User {user.id} ({user.username}) declined TRX commission and returned to menu.")
        await display_main_menu(update, context)
        return ConversationHandler.END


async def entering_trx_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trx_address = update.message.text.strip()
    user = update.effective_user
    if not trx_address:
        logger.warning(f"User {user.id} ({user.username}) entered an empty TRX address.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return ENTERING_TRX_ADDRESS

    logger.info(f"User {user.id} ({user.username}) entered TRX address.")

    context.user_data['trx_address'] = trx_address
    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    inn = context.user_data['inn']

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_exchange')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
    ]

    await update.message.reply_text(
        f"üìã –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"üí∞ –û–±–º–µ–Ω: {amount} {currency} ‚Üí {sum_uah:.2f} UAH\n\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        f"üë§ –§–ò–û: {fio}\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: {context.user_data['card_info']}\n"
        f"üÜî –ò–ù–ù: {inn}\n\n"
        f"‚ö° –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n\n"
        f"üí± –°—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º TRX: {amount - 15} {currency} ‚Üí {(amount - 15) * float(config['Settings']['exchange_rate']):.2f} UAH\n\n"
        f"üîó TRX-–∞–¥—Ä–µ—Å: {trx_address}\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    return FINAL_CONFIRMING_EXCHANGE_TRX


async def final_confirming_exchange_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) is at final TRX confirmation. Action: {data}")

    amount = context.user_data['amount']
    currency = context.user_data['currency']
    sum_uah = context.user_data['sum_uah']
    fio = context.user_data['fio']
    bank_name = context.user_data['bank_name']
    inn = context.user_data['inn']
    trx_address = context.user_data.get('trx_address', '')
    card_info = context.user_data['card_info']

    user_sessions[user.id] = context.user_data.copy()

    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üÜî ID: `{user.id}`\n"
        f"üìõ –ò–º—è: `{user.first_name or '-'}`\n"
        f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
    )

    transfer_info = (
        f"üè¶ –ë–∞–Ω–∫: `{bank_name}`\n"
        f"üìù –§–ò–û: `{fio}`\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: `{card_info}`\n"
        f"üìá –ò–ù–ù: `{inn}`\n\n"
        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n"
        f"üì¨ TRX-–∞–¥—Ä–µ—Å: `{trx_address}`\n"
    )

    if data == 'send_exchange':
        logger.info(
            f"Creating TRX exchange request for user {user.id}. Amount: {amount} {currency}")
        await query.message.chat.send_message(
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n"
            f"üí∞ –ò–∑ –æ–±—â–µ–π —Å—É–º–º—ã {amount:.2f} {currency}, –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **15 USDT** –≤ TRX –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏.\n\n"
            f"üíµ –ö–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: {amount-15} {currency} = {(amount-15) * float(config['Settings']['exchange_rate']):.2f} UAH\n\n"
            f"üè¶ –û–∂–∏–¥–∞–π—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ TRX ‚úÖ\n",
            parse_mode='Markdown'
        )

        admin_ids = get_admin_ids()
        if not admin_ids:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return ConversationHandler.END

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ TRX –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ",
                                 callback_data=f"confirm_trx_transfer_{user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",
                                 callback_data=f"decline_request_{user.id}")
        ]])

        text_for_admin = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n"
            f"üí± {amount} {currency} = {sum_uah:.2f} UAH\n\n"
            f"üíµ –ü–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ TRX: {amount-15} {currency} ‚Üí {((amount-15) * float(config['Settings']['exchange_rate'])):.2f} UAH\n\n"
            f"{user_info}"
            f"{transfer_info}"
        )

        admin_message_ids = {}
        for admin_id in admin_ids:
            try:
                admin_msg = await context.bot.send_message(
                    chat_id=admin_id,
                    text=text_for_admin,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                admin_message_ids[admin_id] = admin_msg.message_id
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        user_sessions[user.id]['admin_message_ids'] = admin_message_ids
        user_sessions[user.id]['admin_text'] = text_for_admin

        logger.info(f"TRX exchange request for user {user.id} sent to admins: {admin_ids}.")
        return ConversationHandler.END
    elif data == 'back_to_menu':
        logger.info(f"User {user.id} cancelled the TRX exchange.")
        await display_main_menu(update, context)
        return ConversationHandler.END

    else:
        logger.warning(
            f"User {user.id} triggered an unknown callback in final TRX confirmation: {data}")
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        await display_main_menu(update, context)
        return ConversationHandler.END


async def handle_transfer_confirmation_trx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split('_')[-1])
    logger.info(f"Admin confirmed TRX transfer to user {user_id}.")

    session = user_sessions.get(user_id)
    if not session:
        logger.warning(f"No session found for user {user_id} during TRX transfer confirmation.")
        await query.edit_message_text(query.message.text + "\n\n‚ùå –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    amount = session.get('amount', 0)
    currency = session.get('currency', 'USDT')

    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≤–µ—Ä—à–∏–ª(–∞) –ø–µ—Ä–µ–≤–æ–¥",
                                  callback_data=f"user_confirms_sending_{user_id}")]
        ])

        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ TRX –≤—ã–ø–æ–ª–Ω–µ–Ω. \n\n"
                f"üì• –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {(amount - 15):.2f} {currency} –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n"
                f"`{config['Settings']['wallet_address']}`\n\n"
                "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
            ),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        logger.info(f"Sent TRX transfer confirmation message to user {user_id}.")

        original_text = session.get('admin_text', '')
        updated_text = original_text + "\n\n‚úÖ1Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ TRX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        session['admin_text_after_trx'] = updated_text

        admin_message_ids = session.get('admin_message_ids', {})
        for admin_id, message_id in admin_message_ids.items():
            try:
                await context.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=message_id,
                    text=updated_text
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    except Exception as e:
        logger.error(f"Failed to send TRX confirmation to user {user_id}: {e}", exc_info=True)
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def ask_for_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()

    user_id = int(query.data.split('_')[-1])
    context.user_data['session_user_id'] = user_id

    logger.info(f"User {query.from_user.id} will provide the transaction hash.")

    await query.edit_message_text(
        text="‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
    )

    return ENTERING_HASH


async def process_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    submitted_hash = update.message.text
    session_user_id = context.user_data.get('session_user_id')

    if not session_user_id:
        logger.warning(f"Process hash failed: No session_user_id found for user {user.id}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        return ConversationHandler.END

    session = user_sessions.get(session_user_id)
    if not session:
        logger.warning(f"Process hash failed: No session data found for user_id {session_user_id}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        return ConversationHandler.END

    admin_message_ids = session.get('admin_message_ids', {})

    base_admin_text = ""
    if 'admin_text_after_trx' in session:
        base_admin_text = session.get('admin_text_after_trx', '')
    else:
        base_admin_text = session.get('admin_text', '')

    if not base_admin_text:
        logger.error(f"Could not retrieve base admin text for user {session_user_id}")
        base_admin_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏."

    final_admin_text = base_admin_text + \
        f"\n\n‚úÖ2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥. Hash: `{submitted_hash}`"
    session['admin_text'] = final_admin_text

    admin_keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã",
                             callback_data=f"confirm_payment_{session_user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",
                             callback_data=f"decline_request_{session_user_id}")
    ]])

    for admin_id, message_id in admin_message_ids.items():
        try:
            await context.bot.edit_message_text(
                chat_id=admin_id,
                message_id=message_id,
                text=final_admin_text,
                reply_markup=admin_keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Failed to update admin message with hash for admin {admin_id}: {e}")

    logger.info(f"Admin messages for user {session_user_id} updated with hash.")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à —Ö—ç—à –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    return ConversationHandler.END


async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split('_')[-1])
    logger.info(f"Admin {query.from_user.id} confirmed payment received from user {user_id}.")

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã. \n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞."
        )
        logger.info(f"Sent payment received confirmation to user {user_id}.")

        session = user_sessions.get(user_id, {})
        original_text = session.get('admin_text', '')
        updated_text = original_text + \
            f"\n\n‚úÖ3Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
        session['admin_text'] = updated_text

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É —Å–¥–µ–ª–∞–Ω",
                                 callback_data=f"confirm_transfer_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",
                                 callback_data=f"decline_request_{user_id}")
        ]])

        admin_message_ids = session.get('admin_message_ids', {})
        for admin_id, message_id in admin_message_ids.items():
            try:
                await context.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=message_id,
                    text=updated_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    except Exception as e:
        logger.error(f"Failed to send payment confirmation to user {user_id}: {e}", exc_info=True)
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def handle_transfer_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split('_')[-1])
    logger.info(f"Admin {query.from_user.id} confirmed final transfer to user {user_id}.")

    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂",
                                  callback_data=f"user_confirm_transfer_{user_id}")]
        ])

        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. üí∏\n\nüôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ü§ù",
            reply_markup=keyboard
        )
        logger.info(f"Sent final transfer confirmation to user {user_id}.")

        session = user_sessions.get(user_id, {})
        original_text = session.get('admin_text', '')
        updated_text = original_text + "\n\n‚úÖ4Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞."
        session['admin_text'] = updated_text

        admin_message_ids = session.get('admin_message_ids', {})
        for admin_id, message_id in admin_message_ids.items():
            try:
                await context.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=message_id,
                    text=updated_text,
                    parse_mode='Markdown',
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    except Exception as e:
        logger.error(
            f"Failed to send final transfer confirmation to user {user_id}: {e}", exc_info=True)
        await query.edit_message_text(
            query.message.text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )


async def handle_user_confirm_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split('_')[-1])
    logger.info(f"User {user_id} confirmed receiving the transfer.")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
    ])

    try:
        session = user_sessions.get(user_id)
        if not session:
            logger.warning(f"Could not find session for user {user_id} to confirm transfer.")
            await query.edit_message_text(
                query.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.",
                reply_markup=keyboard
            )
            return

        admin_message_ids = session.get('admin_message_ids', {})
        original_text = query.message.text
        updated_text = original_text + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ."

        await query.edit_message_text(updated_text, reply_markup=keyboard)

        if admin_message_ids:
            admin_text_before_final_confirm = session.get('admin_text', '')
            final_admin_text = admin_text_before_final_confirm + "\n\n‚úÖüõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥. üõë‚úÖ "

            for admin_id, message_id in admin_message_ids.items():
                try:
                    await context.bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=message_id,
                        text=final_admin_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

            logger.info(f"Admin messages updated with user's final confirmation.")
        else:
            logger.warning(
                f"Could not find admin_message_ids for user {user_id} to update with final confirmation.")

        if user_id in user_sessions:
            del user_sessions[user_id]
            logger.info(f"Session for user {user_id} has been cleared.")

    except Exception as e:
        logger.error(f"Error handling user final transfer confirmation: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                query.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.",
                reply_markup=keyboard
            )
        except Exception:
            pass


async def handle_decline_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = int(data.split('_')[-1])
    admin_user = query.from_user
    logger.info(f"Admin {admin_user.id} declined the request for user {user_id}.")

    support_contact = config['Settings'].get('support_contact', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {support_contact}"
            )
        )
        logger.info(f"Sent decline notification to user {user_id}.")
    except Exception as e:
        logger.error(f"Failed to send decline notification to user {user_id}: {e}")
        await query.follow_up.send(text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—à–∏–±–∫–∞: {e}")

    session = user_sessions.get(user_id)
    if session and 'admin_message_ids' in session:
        admin_message_ids = session.get('admin_message_ids', {})
        admin_text = session.get('admin_text', '–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        updated_text = admin_text + \
            f"\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_user.username or admin_user.id})"

        for admin_id, message_id in admin_message_ids.items():
            try:
                await context.bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=message_id,
                    text=updated_text,
                    parse_mode='Markdown',
                    reply_markup=None
                )
            except Exception as e:
                logger.error(f"Failed to update decline status for admin {admin_id}: {e}")
    else:
        logger.warning(f"Could not find session for user {user_id} to update with decline status.")
        await query.edit_message_text(
            query.message.text +
            f"\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_user.username or admin_user.id})",
            reply_markup=None
        )

    if user_id in user_sessions:
        del user_sessions[user_id]
        logger.info(f"Session for user {user_id} has been cleared after decline.")


def main():
    if sys.platform == "win32":
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

    logger.info("Starting the bot...")

    application = ApplicationBuilder().token(config['User']['TOKEN']).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(
            handle_menu, pattern='^(exchange|rate|user_help|back_to_menu)$')],
        states={
            CHOOSING_CURRENCY: [CallbackQueryHandler(choosing_currency)],
            ENTERING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_amount)],
            ENTERING_BANK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_bank_name)],
            ENTERING_CARD_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_card_details)],
            ENTERING_FIO_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_fio_details)],
            ENTERING_INN_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_inn_details)],
            CONFIRMING_EXCHANGE: [CallbackQueryHandler(confirming_exchange)],
            CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(confirming_exchange_trx)],
            ENTERING_TRX_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, entering_trx_address)],
            FINAL_CONFIRMING_EXCHANGE_TRX: [CallbackQueryHandler(final_confirming_exchange_trx)],
        },
        fallbacks=[CommandHandler('start', cancel_and_restart)],
    )

    admin_handler = ConversationHandler(
        entry_points=[CommandHandler('a', admin_panel.admin_panel_start)],
        states={
            admin_panel.ASK_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.admin_panel_password)],
            admin_panel.ADMIN_MENU: [CallbackQueryHandler(admin_panel.admin_panel_handler, pattern='^admin_')],
            admin_panel.SETTINGS_MENU: [CallbackQueryHandler(admin_panel.admin_panel_handler, pattern='^admin_')],
            admin_panel.SET_NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.set_new_password)],
            admin_panel.SET_EXCHANGE_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.set_exchange_rate)],
            admin_panel.SET_WALLET: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.set_wallet)],
            admin_panel.SET_SUPPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel.set_support_contact)],
        },
        fallbacks=[CommandHandler('a', admin_panel.admin_panel_start),
                   CommandHandler('ac', admin_panel.admin_panel_close)]
    )

    hash_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_hash, pattern=r'^user_confirms_sending_')],
        states={
            ENTERING_HASH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_hash)],
        },
        fallbacks=[CommandHandler('start', cancel_and_restart)],
    )

    application.add_handler(admin_handler)
    application.add_handler(hash_handler)
    application.add_handler(conv_handler)

    application.add_handler(CallbackQueryHandler(
        handle_decline_request, pattern=r'^decline_request_'))
    application.add_handler(CallbackQueryHandler(
        handle_payment_confirmation, pattern=r'^confirm_payment_'))
    application.add_handler(CallbackQueryHandler(
        handle_transfer_confirmation, pattern=r'^confirm_transfer_'))
    application.add_handler(CallbackQueryHandler(
        handle_transfer_confirmation_trx, pattern=r'^confirm_trx_transfer_'))
    application.add_handler(CallbackQueryHandler(
        handle_user_confirm_transfer, pattern=r'^user_confirm_transfer_'))

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('a', admin_panel.admin_panel_start))

    logger.info("Bot started successfully! Polling for updates...")
    application.run_polling()


if __name__ == "__main__":
    main()
